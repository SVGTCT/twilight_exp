title: Election
on-arrival: {!
Q[parties + '_seats_old'] = Q[parties + '_seats']

for (var c of Q.classes) {
    var class_votes = 0;
    for (var parties of Q.parties) {
        if (Q[c+'_'+parties] < 0) {
            Q[c+'_'+parties] = 0;
        }
        class_votes += Q[c+'_'+parties];
    }
    for (var parties of Q.parties) {
        Q[c + '_' + parties + '_normalized'] = 100*Q[c+'_'+parties]/class_votes;
        Q[c + '_' + parties + '_display'] = Math.round(100*Q[c+'_'+parties]/class_votes);
    }
}

// 1. calculate support for each of the parties
var total_support = 0;
for (var parties of Q.parties) {
    var parties_support = 0;
    for (var c of Q.classes) {
        // but this version is somewhat more entertaining and allows for wilder swings in votes.
        // the other option basically necessitates a multi-class strategy. while the first option allows for a working-class-only strategy.
        if (Q.old_demographics) {
            // okay i'm pretty sure this is wrong, and the hard version is correct
            // basically this allows for "spillover" effects in other demographics.
            // so you can campaign among say the workers and 
            parties_support += Q[c]*Q[c+'_'+parties];
            // However, there should be a cap on how much parties support you can get in a certain demo.
        } else  {
            parties_support += Q[c]*Q[c+'_'+parties+'_normalized'];
        }
    }
    Q[parties + '_support'] = parties_support;
    total_support += parties_support;
}

for (var parties of Q.parties) {
    Q[parties+'_normalized'] = Q[parties + '_support']/total_support;
    Q[parties+'_votes_dec'] = Math.round(Q[parties+'_normalized']*1000)/10;
    if (Q.use_decimals) {
        Q[parties+'_votes'] = Q[parties+'_votes_dec'];
        Q[parties + '_votes_disp'] = Q[parties+'_votes'];
    } else {
        Q[parties+'_votes'] = Math.round(Q[parties+'_normalized']*100);
        Q[parties + '_votes_disp'] = Q[parties+'_votes_dec'].toFixed(1);
    }
    //Q[parties+'_votes'] = Q[parties+'_votes_dec'];
    // display
}

// calculate Commons representation
Q.communist_c_raw = Q.communist_votes_dec * Q.communist_modifier;
Q.communist_c = Math.round(Q.communist_votes_dec * Q.communist_modifier);
Q.communist_seats = Math.round(Q.communist_c_raw * 6.15);

Q.ind_lab_c_raw = Q.ind_lab_votes_dec * Q.ind_lab_modifier;
Q.ind_lab_c = Math.round(Q.ind_lab_votes_dec * Q.ind_lab_modifier);
Q.ind_lab_seats = Math.round(Q.ind_lab_c_raw * 6.15);

Q.nationalist_c_raw = Q.nationalist_votes_dec * Q.nationalist_modifier;
Q.nationalist_c = Math.round(Q.nationalist_votes_dec * Q.nationalist_modifier);
Q.nationalist_seats = Math.round(Q.nationalist_c_raw * 6.15);

Q.lab_c_raw = Q.lab_votes_dec * Q.lab_modifier;
Q.lab_c = Math.round(Q.lab_votes_dec * Q.lab_modifier);
Q.lab_seats = Math.round(Q.lab_c_raw * 6.15);

if (Q.year < 1936) {
    Q.nat_lab_c = 0
    Q.nat_lab_seats = 0
}
else {
    Q.nat_lab_c_raw = Q.nat_lab_votes_dec * Q.nat_lab_modifier;
    Q.nat_lab_c = Math.round(Q.nat_lab_votes_dec * Q.nat_lab_modifier);
    Q.nat_lab_seats = Math.round(Q.nat_lab_c_raw * 6.15);
}

Q.lib_c_raw = Q.lib_votes_dec * Q.lib_modifier;
Q.lib_c = Math.round(Q.lib_votes_dec * Q.lib_modifier);
Q.lib_seats = Math.round(Q.lib_c_raw * 6.15);

Q.nat_lib_c_raw = Q.nat_lib_votes_dec * Q.nat_lib_modifier;
Q.nat_lib_c = Math.round(Q.nat_lib_votes_dec * Q.nat_lib_modifier);
Q.nat_lib_seats = Math.round(Q.nat_lib_c_raw * 6.15);

Q.con_c_raw = Q.con_votes_dec * Q.con_modifier;
Q.con_c = Math.round(Q.con_votes_dec * Q.con_modifier);
Q.con_seats = Math.round(Q.con_c_raw * 6.15);

Q.other_c_raw = Q.other_votes_dec * Q.other_modifier;
Q.other_c = Math.round(Q.other_votes_dec * Q.other_modifier);
Q.other_seats = Math.round(Q.other_c_raw * 6.15);

Q.buf_c_raw = Q.buf_votes_dec * Q.buf_modifier;
Q.buf_c = Math.round(Q.buf_votes_dec * Q.buf_modifier);
Q.buf_seats = Math.round(Q.buf_c_raw * 6.15);

Q.total_seats = Q.communist_seats + Q.ind_lab_seats + Q.nationalist_seats + Q.lab_seats + Q.nat_lab_seats + Q.lib_seats + Q.nat_lib_seats + Q.con_seats + Q.other_seats + Q.buf_seats;

if (Q.total_seats > 615) {
    Q.lab_seats = Q.lab_seats - (Q.total_seats - 615)
}

if (Q.total_seats < 615) {
    Q.lab_seats = Q.lab_seats + (615 - Q.total_seats)
}

// calculate changes

Q[parties + '_change'] = Q[parties + '_seats']- Q[parties + '_seats_old']

if (Q[parties + '_change'] > 0) {
    Q[parties + '_symbol'] = '<img src="img/arrowup.png">' 
}
else {
    Q[parties + '_symbol'] = '<img src="img/arrowdown.png">' 
    Q[parties + '_change'] = Q[parties + '_seats_old'] - Q[parties + '_seats']
}

// The largest parties can only be Labour or the Tories
Q.largest_parties = 'Conservative';
if (Q.lab_c > Q.con_c) {
    Q.largest_parties = 'Labour';
}

// coalitions
Q.national_government = Q.con_c + Q.nat_lib_c + Q.nat_lab_c + Math.round((Q.other_c/2));
Q.national_government_seats = Q.con_seats + Q.nat_lib_seats + Q.nat_lab_seats + Math.round((Q.other_seats/2));
Q.lw_government = Q.lab_c + Q.ind_lab_c;
Q.lw_government_seats = Q.lab_seats + Q.ind_lab_seats;
Q.lab_lib_government = Q.lab_c + Q.lib_c;
Q.lab_lib_government_seats = Q.lab_seats + Q.lib_seats + Q.nat_lib_seats;
Q.socialist_government = Q.lab_c + Q.communist_c;
Q.socialist_government_seats = Q.lab_seats + Q.communist_seats;

Q.leverage = Q.lab_c;

Q.lib_failed = 0;
// liberal demands
Q.no_taxes = 0;
Q.yes_pr = 0;
Q.no_ottawa = 0;
Q.lib_test = 0;
Q.no_assurances = 0;
Q.socialist_failed = 0;
// communist demands
Q.work_councils = 0;
Q.health_service = 0;
Q.decolonisation = 0;
Q.yes_nationalise = 0;
Q.labour_code = 0;
Q.no_religious_schools = 0;
Q.right_coalition_dissent = 0;
Q.left_coalition_dissent = 0;
Q.lab_in_government = 0;
Q.in_national_government = 0;
Q.in_lab_majority = 0;
Q.in_con_majority = 0;
Q.in_lab_minority = 0;
Q.in_con_minority = 0;
Q.in_lw_government = 0;
Q.in_lab_lib_government = 0;
Q.in_socialist_government = 0;
Q.minority_government = 0;
Q.lab_toleration = 0;
Q.lord_chancellor = 'Hogg';
Q.lord_chancellor_parties = 'Con.';
Q.chancellor = 'Chamberlain';
Q.chancellor_parties = 'Con.';
Q.home_secretary = 'Simon';
Q.home_secretary_parties = 'Nat. Lib.';
Q.foreign_secretary = 'Hoare';
Q.foreign_secretary_parties = ' Con.';
Q.colonial_secretary = 'M. MacDonald';
Q.colonial_secretary_parties = 'Nat. Lab.';
Q.dominions_secretary = 'Thomas';
Q.dominions_secretary_parties = 'Nat. Lab.';
Q.war_secretary = 'Halifax';
Q.war_secretary_parties = 'Con.';
Q.india_secretary = 'Dundas';
Q.india_secretary_parties = 'Con.';
Q.scottish_secretary = 'Collins';
Q.scottish_secretary_parties = 'Nat. Lib.';
Q.agriculture_minister = 'Elliot';
Q.agriculture_minister_parties = 'Un. (Con.)';
Q.labour_minister = 'Brown';
Q.labour_minister_parties = 'Nat. Lib.';
Q.health_minister = 'Wood';
Q.health_minister_parties = 'Con.';

// TODO: anti-CPGB/BUF timer

// election is no longer in progress
Q.election_ip = 0;
!}
go-to: election_1935.main_content
